import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { messages } = req.body;

  try {
    // Replace this with your backend API call
    const response = await fetch("https://your-backend-api.com/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from backend");
    }

    const data = await response.json();
    res.status(200).json({ reply: data.reply });
  } catch (error) {
    console.error("Error:", error);

    // Return the error message as a reply
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    const dialouges = [
      `тЬКтЬКтЬК: ржЬрж┐рзЯрж╛рж░ рж╕рзИржирж┐ржХ, ржорж╛ржЗрж░ ржЦрж╛рзЯ ржжрзИржирж┐ржХ `,
      `ЁЯШбЁЯШбЁЯШб: ржмрж╛рзЬрзА ржХрзЛржерж╛рзЯ, ржЧрзЛржкрж╛рж▓рзА??`,
      `ЁЯТАЁЯТАЁЯТА: рж╢рзЗржЦ рж╣рж╛рж╕рж┐ржирж╛ ржкрж╛рж▓рж╛рзЯ ржирж╛`,
      `тШЭя╕ПтШЭя╕ПтШЭя╕П: ржПржЗ ржЪрзНржпрж╛ржЯрзЗрж░ рззрзж% ржЖржорж╛рж░`,
      `ЁЯзаЁЯзаЁЯза: ржирж╛рждрж┐рж░рзЗ рж▓ржирзНржбржирзЗ ржкрж╛ржарж╛рзЯ, ржжрзЗрж╢рзЗ ржХрзЯ рж╕рзНржмрж╛ржзрзАржирждрж╛`,
      `ЁЯСЮЁЯСЮЁЯСЮ: рж╣рж╛ржУрзЯрж╛ ржнржмржи ржЦрзБрж▓ржЫрзЗ ржХржмрзЗ?`,
      `ЁЯФеЁЯФеЁЯФе: ржХрж╕ржо ржорзБржЬрж┐ржмрзЗрж░, ржкрж┐ржЫрзБ рж╣ржЯржмрж┐ ржирж╛`,
      `ЁЯУвЁЯУвЁЯУв: рж╣рзЛржХ ржЖржирзНржжрзЛрж▓ржи, ржЧржжрж┐ ржЫрж╛рзЬ ржнрж╛ржЗ`,
      `ЁЯШдЁЯШдЁЯШд: ржкрзНржпрж╛ржХрзЗржЯ ржжрж┐рзЯрж╛ ржнрзЛржЯ ржХрж┐ржирзЗ, ржПржЦржи ржХрзЯ ржЬржирждрж╛рж░ ржирзЗрждрж╛?`,
      `ЁЯТ╝ЁЯТ╝ЁЯТ╝: рж╕рж╛рж╣рзЗржм ржЖрж╕рзЗ Prado рждрзЗ, ржнрзЛржЯ ржЪрж╛рзЯ ржнрзНржпрж╛ржирзЗ`,
      `ЁЯзГЁЯзГЁЯзГ: рж░рж╛ржЬржирзАрждрж┐ ржХрж░рзЗ ржЪрж╛ржЪрж╛, ржорж╛рж▓ ржЦрж╛рзЯ ржнрж╛ржЧрзНржирзЗ`,
      `ЁЯУжЁЯУжЁЯУж: ржЙржирзНржирзЯржирзЗрж░ ржЪрж╛ржкрзЗ, рж░рзЗрж╢ржирзЗржЗ ржирж╛ржЗ ржЪрж╛рж▓`,
      `ЁЯШотАНЁЯТиЁЯШотАНЁЯТиЁЯШотАНЁЯТи: ржнрж╛ржЗрж░рзЗ ржнрж╛ржЗ, рж╣рж╛ржУрзЯрж╛ ржЧрзНржпрж╛ржЫрзЗ рж╣рж╛ржУрзЯрж╛рзЯ`,
      `ЁЯкЩЁЯкЩЁЯкЩ: ржЪрж╛-ржУрзЯрж╛рж▓рж╛рж░ ржЧрж▓рзНржк, ржПржЦржи ржмрзНржпрж╛ржВржХ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ`,
      `ЁЯз│ЁЯз│ЁЯз│: ржЖржирзНржжрзЛрж▓ржи ржХрж░ржмрзЗ, ржЖржЧрзЗ ржХрж╛рждрж╛рж░ ржерзЗржЗржХрж╛ ржЖрзЯ`,
      `ЁЯл╡ЁЯл╡ЁЯл╡: ржЦрж╛рж▓рзЗржжрж╛рж░ ржорзБржХрзНрждрж┐ ржЪрж╛рзЯ, ржЦрж╛рж▓рзЗржжрж╛ ржЬрж╛ржирзЗ ржирж╛`,
      `ЁЯлеЁЯлеЁЯле: рж╕рждрзНржп ржмрж▓рж▓рзЗ, рж╣рзЯрзЗ ржпрж╛ржЗ рж░рж╛ржЬрж╛ржХрж╛рж░?`,
      `ЁЯЩМЁЯЩМЁЯЩМ: рж╢рзЗржЦ рж╣рж╛рж╕рж┐ржирж╛ ржирж╛ржо рж╢рзБржирж▓рзЗ, ржШрж╛ржо ржжрзЗрзЯ рж╣рж╛ржУрзЯрж╛ ржнржмржирзЗ`,
        `ЁЯШдЁЯШдЁЯШд: ржмржЩрзНржЧржмржирзНржзрзБ ржмрж▓рзЗ ржЧрзЗржЫрзЗржи, рж▓рзЬрж╛ржЗ ржХрж░рзЗржЗ ржмрж╛ржБржЪрждрзЗ рж╣ржмрзЗ`,
        `ЁЯХКя╕ПЁЯХКя╕ПЁЯХКя╕П: ржмржЩрзНржЧржмржирзНржзрзБ рж╕рзНржмржкрзНржи ржжрзЗржЦрж╛рзЯ, ржЖржорж░рж╛ ржШрзБржорж╛ржЗ`,
        `ЁЯПаЁЯПаЁЯПа: ржЖрзЯржирж╛ржШрж░рзЗ ржкрж╛ржарж┐рзЯрзЗ ржжрж┐ржмрзЛ`,
        `ЁЯШОЁЯШОЁЯШО: ржмржжржорж╛ржЗрж╢ рж╕рж╛рж░ржЬрж┐рж╕`
    ];
    const randomReply = dialouges[Math.floor(Math.random() * dialouges.length)];
    res.status(200).json({ reply: randomReply });
  }
}